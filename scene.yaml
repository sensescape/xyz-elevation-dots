# Author: Geraldine Sarmiento

# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key

    black_color:                  [1.000,1.000,1.000]
    dark_color:                   [0.750,0.750,0.750]
    mid_color:                    [0.500,0.500,0.500]
    midlight_color:               [0.460,0.460,0.460]
    extralight_color:             [0.410,0.410,0.410]
    light_color:                  [0.365,0.365,0.365]
    lighter_color:                [0.275,0.275,0.275]
    lightest_color:               [0.220,0.220,0.220]
    ultralight_color:             [0.195,0.195,0.195]
    offwhite_color:               [0.175,0.175,0.175]
    white_color:                  [0.000,0.000,0.000]

    text_font_family: 'Orbitron'

    roads_text_fill:              [0.800,0.800,0.800]
    roads_text_stroke:            [0.110,0.110,0.110]

    ux_language_text_source: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;
        }

    ux_language_text_source_road_ref_and_name: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if(feature.ref && name) {
                return (feature.ref + ' ' + name);
            } else {
                return name;
            }
            */
        }
    ux_language_text_source_road_ref_and_name_short: |
        function() {
            // if a ux_langauge has been defined use that, else if there is feature name in the fallback_ux_language then use that, else use the feature's default name in the local language
            return (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature.name;

            /*
            var name = (global.ux_language && feature['name:'+global.ux_language]) || (global.ux_language_fallback && feature['name:'+global.ux_language_fallback]) || feature['name'];
            if (feature.ref && (feature.ref.length < 6) && name) {
                return feature.ref + ' ' + name;
            } else {
                return name;
            }
            */
        }

# Fonts
fonts:
    Orbitron:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/orbitron/v7/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff
          url: fonts/94ug0rEgQO_WuI_xKJMFc3YhjbSpvc47ee6xR_80Hnw.woff

    Cairo:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/cairo/v1/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff
          url: fonts/ZA_4ooaF_Dfdn26t_IoQOaCWcynf_cDxXwCLxiixG1c.woff

    Aldrich:
        - weight: normal # Regular
          # url: https://fonts.gstatic.com/s/aldrich/v6/VWXaIPGrUapL_Y2vGs0lKALUuEpTyoUstqEm5AMlJo4.woff
          url: fonts/VWXaIPGrUapL_Y2vGs0lKALUuEpTyoUstqEm5AMlJo4.woff

textures:
    palette:
        url: images/ramp2.png

scene:
    background:
        color: [0.100,0.100,0.100]

sources:
    # mapzen:
    #     type: MVT
    #     # url:  https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
    #     url: https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
    #     url_params:
    #         api_key: JJiaZE63TZObzPrmx0TQkw
    #     tile_size: 512
    #     max_zoom: 16

    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 15
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 14

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                style: terrain-pattern-earth
                order: global.feature_order
                color: [0.100,0.100,0.100] #color of stripes

    water:
        data: { source: mapzen, layer: water }
        draw:
            polygons:
                style: terrain-pattern-water
                order: global.feature_order
                color: [0.100,0.100,0.100]

        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: [1],  area: { min: 10000000000 } }
                    - { $zoom: [2],  area: { min: 7000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: [3],  area: { min: 5000000000 } }
                    - { $zoom: [4],  area: { min: 300000000 } }
                    - { $zoom: [5],  area: { min: 50000000 } }
                    - { $zoom: [6],  area: { min: 50000000 } }
                    - { $zoom: [7],  area: { min: 50000000 } }
                    - { $zoom: [8],  area: { min: 50000000 } }
                    - { $zoom: [9],  area: { min: 15000000 } }
                    - { $zoom: [10], area: { min: 4000000 } }
                    - { $zoom: [11], area: { min: 1000000 } }
                    - { $zoom: [12], area: { min: 250000 } }
                    - { $zoom: [13], area: { min: 150000 } }
                    - { $zoom: [14], area: { min: 40000 } }
                    - { $zoom: { min: 15 } }
            draw:
                polygons:
                    color: [0.100,0.100,0.100]

        other-water-areas:
            filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                polygons:
                    color: [0.100,0.100,0.100]

    roads:
        data: { source: mapzen, layer: roads }
        draw:
            lines:
                visible: true
                width: 1px
                order: global.feature_order
                # but give them all the same outline
                outline:
                    order: 352
            text-blend-order:
                text_source: global.ux_language_text_source
                visible: false    # labels are enabled by each layer below
                font:
                    family: Cairo
                    weight: normal
                    fill: global.roads_text_fill

        early:
            filter: { $zoom: { max: 15 } }
            draw:
                lines:
                    outline:
                        order: global.feature_order

        bridges-tunnels:
            filter: { any: [is_bridge: true, is_tunnel: true] }
            draw:
                lines:
                    #cap: butt
                    outline:
                        # except bridges and tunnels, their outlines should also self-sort
                        order: global.feature_order

        # default outlines starting at zoom 16
        default-outline-width:
            filter: { $zoom: { min: 16 } }
            draw:
                lines:
                    outline:
                        width: function () { return 3/16 * Math.log($zoom); }

        natural_earth_highways:
            filter: { $zoom: { min: 5, max: 8 } }
            draw:
                lines:
                    color: [[5, global.mid_color], [6, global.black_color]]
                    width: [[5, 0.5px], [6, 0.5px], [7, 0.75px]]
                    outline:
                        color: global.mid_color
                        width: [[9, 0px], [10, 0px], [12, 1px], [16, 2px]]
            major_road:
                filter: { kind: major_road }
                draw:
                    lines:
                        color: [[5, global.light_color], [7, global.mid_color]]
                        width: [[5, 0.25px], [7, 0.5px]]
                        # outline:
                        #     width: [[8, 0.0px], [9, 0.0px], [11, .5px], [16, .75px]]
            minor_road:
                filter: { kind: minor_road }
                draw:
                    lines:
                        color: global.offwhite_color
                        width: 0.5px
                        # outline:
                        #     width: [[12, 0px], [14, .5px], [17, 1px]]
            ferry:
                filter: { kind: ferry }
                draw:
                    lines:
                        visible: false
                        # color: global.light_color
                        # width: 0.5px
                        # outline:
                        #     width: 0px
        highway:
            filter: { kind: highway, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [[8, global.black_color], [13, global.black_color], [14, global.white_color]]
                    width: [[8, 1px], [13, 1px], [14, 0.1px], [15, 1.5px], [17, 8px], [18, 10m]]
                    outline:
                        color: [[8, global.white_color], [12, global.white_color], [13, global.black_color]]
                        width: [[8, 0px], [13, 0px], [14, 1px]]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [[9, global.mid_color], [13, global.mid_color], [14, global.white_color]]
                        width: [[9, 0px], [13, 0.75px], [14, 0.1px], [17, 4px], [18, 5m]]
                        outline:
                            color: [[9, global.white_color], [12, global.white_color], [13, global.mid_color], [15, global.black_color]]
                            width: [[9, 0px], [13, 0px], [14, 0.4px], [17, 1px]]
                early_link:
                    filter: { $zoom: {min: 13, max: 15} }
                    draw:
                        lines:
                            order: 352
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: { min: 13 } }
                    draw:
                        lines:
                            color: [[13, global.light_color], [14, global.ultralight_color]]
                            outline:
                                color: [[12, global.white_color], [13, global.light_color]]
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [[13, global.light_color], [14, global.ultralight_color]]
                        outline:
                            color: [[12, global.white_color], [13, global.light_color]]
            highway_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt
            labels-highway-z14:
                filter: { $zoom: { min: 14 } }
                draw:
                    text-blend-order:
                        priority: 50
                        text_source: global.ux_language_text_source
                        visible: true
                        font:
                            family: Aldrich
                            size: [[15,12px],[20,14px]]
                            stroke: { color: global.roads_text_stroke, width: 6px }

        major_road:
            filter: { kind: major_road, $zoom: { min: 8 } }
            # default style
            draw:
                lines:
                    color: [[8, global.black_color], [13, global.black_color], [17, global.white_color]]
                    width: [[13, 1px], [16, 1px], [17, 3px]]
                    outline:
                        width: [[12, 0px], [13, 0.5px], [15, 1px]]
            trunk_primary:
                filter: { kind_detail: [trunk, primary] }
                draw:
                    lines:
                        color: [[8, global.midlight_color], [12, global.mid_color], [13, global.black_color], [14, global.white_color]]
                        width: [[8, 0.5px], [11, 0.5px], [13, 1px], [14, 0.1px], [16, 2px], [17, 8px], [18, 10m]]
                        outline:
                            color: [[8, global.white_color], [12, global.white_color], [13, global.black_color]]
                            width: [[8, 0px], [13, 0px], [14, 0.75px], [16, 1px]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 2; }
                    primary:
                        filter: { kind: [primary] }
                        draw:
                            lines:
                                outline:
                                    order: function() { return feature.sort_rank + 1; }
                routes:
                    filter: { ref: true }
                    draw:
                        lines:
                            color: [[8, global.midlight_color], [12, global.mid_color], [13, global.black_color], [14, global.white_color]]
                            width: [[9, 0.5px], [13, 1px], [14, 0.1px], [15, 1.25px], [16, 2px], [17, 8px], [18, 10m]]
                            outline:
                                color: [[8, global.white_color], [12, global.white_color], [13, global.black_color]]
                                width: [[8, 0px], [13, 0px], [14, 0.75px], [15, 1px]]
                    early:
                        filter: { $zoom: { max: 16 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [[13, global.light_color], [14, global.ultralight_color]]
                                outline:
                                    color: [[12, global.white_color], [13, global.light_color]]
                    labels-trunk_primary-route-z14:
                        filter: { $zoom: { min: 14 } }
                        draw:
                            text-blend-order:
                                priority: 51
                                visible: true
                                text_source: global.ux_language_text_source_road_ref_and_name
                                font:
                                    family: Aldrich
                                    size: [[15,12px],[20,14px]]
                                    stroke: { color: global.roads_text_stroke, width: 4px }
                labels-trunk-primary-z14:
                    filter: { $zoom: 14 }
                    draw:
                        text-blend-order:
                            priority: 51
                            text_source: global.ux_language_text_source
                            visible: true
                            font:
                                size: 10px
                                stroke: { color: global.roads_text_stroke, width: 3px }

                labels-trunk-primary-z15:
                    filter: { $zoom: { min: 15 } }
                    draw:
                        text-blend-order:
                            priority: 51
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            visible: true
                            font:
                                size: [[15,13px],[18,14px]]
                                stroke: { color: global.roads_text_stroke, width: [[15, 4px], [17, 6px]] }
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [[10, global.mid_color], [15, global.light_color], [16, global.white_color]]
                        width: [[10, 0.5px], [12, 0.5px], [15, 0.75px], [16, 1.75px], [17, 3px], [18, 5m]]
                        outline:
                            color: [[10, global.white_color], [15, global.mid_color], [16, global.black_color]]
                            width: [[10, 0px], [15, 0px], [16, 1px]]
            tunnel:
                filter: { is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [[13, global.light_color], [14, global.ultralight_color]]
                        outline:
                            color: [[12, global.white_color], [13, global.light_color]]
            secondary:
                filter: { kind_detail: secondary }
                draw:
                    lines:
                        color: [[10, global.lighter_color], [13, global.midlight_color], [15, global.dark_color], [16, global.white_color]]
                        width: [[10, 0.5px], [12, 0.5px], [14, 1px], [15, 1px], [16, 0.1px], [17, 7.5px], [18, 9m]]
                        outline:
                            color: [[10, global.white_color], [14, global.white_color], [15, global.black_color]]
                            width: [[10, 0px], [15, 0px], [16, 1px]]
                early:
                    filter: { $zoom: { max: 16 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: 353 #function() { return feature.sort_rank + 2; }
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [[10, global.lighter_color], [13, global.mid_color], [15, global.black_color], [16, global.white_color]]
                            width: [[10, 0.5px], [13, 1px], [15, 1px], [16, 0.1px], [17, 7.5px], [18, 9m]]
                            outline:
                                color: [[10, global.white_color], [14, global.white_color], [15, global.black_color]]
                                width: [[10, 0px], [15, 0px], [16, 1px]]
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 2; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: {is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [[13, global.light_color], [15, global.light_color], [16, global.ultralight_color]]
                                outline:
                                    color: [[13, global.white_color], [14, global.white_color], [15, global.light_color]]
                    labels-secondary-routes-z15-up:
                        filter: { $zoom: { min: 15 } }
                        draw:
                            text-blend-order:
                                priority: 56
                                visible: true
                                text_source: global.ux_language_text_source_road_ref_and_name_short
                                font:
                                    size: [[13,10px],[15,13px],[18,14px]]
                                    stroke: { color: global.roads_text_stroke, width: 4px }
                labels-secondary:
                    filter: { $zoom: { min: 15 } }
                    draw:
                        text-blend-order:
                            priority: 56
                            visible: true
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                size: [[15,13px],[18,14px]]
                                stroke: { color: global.roads_text_stroke, width: 4px }
            tertiary:
                filter: { kind_detail: [tertiary, tertiary_link] }
                draw:
                    lines:
                        color: [[11, global.lighter_color], [15, global.dark_color], [16, global.white_color]]
                        width: [[11, 0.5px], [15, 1px], [16, 0.1px], [17, 6px], [18, 9m]]
                        outline:
                            color: [[11, global.white_color], [14, global.white_color], [15, global.black_color]]
                            width: [[11, 0px], [15, 0px], [16, 1px]]
                early:
                    filter: { $zoom: { max: 15 } }
                    draw:
                        lines:
                            order: 352
                            outline:
                                order: function() { return feature.sort_rank + 3; }
                routes:
                    filter: { ref: true, $zoom: { min: 12 } }
                    draw:
                        lines:
                            color: [[11, global.lighter_color], [15, global.dark_color], [16, global.white_color]]
                            width: [[11, 0.5px], [15, 1px], [16, 0.1px], [17, 6px], [18, 9m]]
                            outline:
                                color: [[11, global.white_color], [14, global.white_color], [15, global.black_color]]
                                width: [[11, 0px], [15, 0px], [16, 1px]]
                    early:
                        filter: { $zoom: { max: 15 } }
                        draw:
                            lines:
                                order: function() { return feature.sort_rank + 3; }
                                outline:
                                    order: 353
                    tunnel:
                        filter: { is_tunnel: true, $zoom: { min: 13 } }
                        draw:
                            lines:
                                color: [[13, global.light_color], [15, global.light_color], [16, global.ultralight_color]]
                                outline:
                                    color: [[13, global.white_color], [14, global.white_color], [15, global.light_color]]
                link:
                    filter: { is_link: true } # on- and off-ramps, etc
                    draw:
                        lines:
                            color: [[14, global.light_color], [15, global.dark_color], [16, global.white_color]]
                            width: [[11, 0.0px], [15, 0.5px], [16, 0.1px], [18, 4.5m]]
                            outline:
                                color: [[11, global.white_color], [14, global.white_color], [15, global.black_color]]
                                width: [[11, 0px], [14, 0px], [16, 0.25px], [18, 1px]]
                labels-tertiary:
                    filter: { $zoom: { min: 16 } }
                    draw:
                        text-blend-order:
                            priority: 57
                            visible: true
                            text_source: global.ux_language_text_source_road_ref_and_name_short
                            font:
                                size: [[15,10px],[18,14px]]
                                stroke: { color: global.roads_text_stroke, width: 5px }
        minor_road:
            filter: { kind: minor_road, not: { kind_detail: service }, $zoom: { min: 8 } }
            draw:
                lines:
                    color: [[11, global.ultralight_color], [14, global.mid_color], [16, global.white_color]]
                    width: [[11, 0.35px], [13, 0.5px], [14, 1px], [15, 1px], [16, 0.1px], [17, 4px], [18, 9m]]
                    outline:
                        color: [[15, global.mid_color], [17, global.black_color]]
                        width: [[11, 0px], [15, 0px], [16, 0.75px], [17, 1px]]
            early:
                filter: { $zoom: { max: 16 } }
                draw:
                    lines:
                        order: 350
                        outline:
                            order: 351
            # Is this junk code?
            round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: round
                        join: round

            tunnel:
                filter: {is_tunnel: true, $zoom: { min: 13 } }
                draw:
                    lines:
                        color: [[13, global.light_color], [15, global.light_color], [16, global.ultralight_color]]
                        outline:
                            color: [[13, global.white_color], [14, global.white_color], [15, global.light_color]]
            minor_road_bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
                        outline:
                            cap: butt
            labels-minor_road:
                filter: { $zoom: { min: 16 } }
                draw:
                    text-blend-order:
                        priority: 59
                        visible: true
                        text_source: name
                        font:
                            size: [[15,10px],[18,14px]]
                            stroke: { color: global.roads_text_stroke, width: 4px }
        service_road:
            filter: { kind: minor_road, kind_detail: service, $zoom: { min: 13 } }
            draw:
                lines:
                    color: [[13, global.offwhite_color], [15, global.midlight_color], [16, global.white_color]]
                    width: [[13, 0px], [15, 0.75px], [16, 0.1px], [17, 2.5px], [18, 5m]]
                    outline:
                        color: [[13, global.white_color], [14, global.white_color], [15, global.mid_color], [18, global.black_color]]
                        width: [[13, 0px], [15, 0px], [16, 0.6px], [19, 1px]]
            labels-service_road:
                filter: { $zoom: { min: 17 } }
                draw:
                    text-blend-order:
                        priority: 60
                        visible: true
                        text_source: name
                        font:
                            size: [[15,10px], [18,14px]]
                            stroke: { color: global.roads_text_stroke, width: 4px }

        path:
            filter:
                all:
                    - kind: [path, portage_way]
                not:
                    - kind_detail: [steps, track, pier]
            draw:
                lines:
                    color: global.white_color
                    width: [[14, 0px], [16, 0.15px], [17, 2.5px], [20, 3m]]
            early:
                filter:
                    $zoom: { max: 15 }
                draw:
                    lines:
                        order: 351
                        outline:
                            order: 350
            pedestrian:
                filter: { kind_detail: pedestrian }
                draw:
                    lines:
                        color: global.white_color
                        width: [[14, 0px], [16, 0.15px], [17, 2.5px], [20, 3m]]
            footway:
                filter: { kind_detail: footway }
                draw:
                    lines:
                        color: global.white_color
                        width: [[14, 0px], [16, 0.15px], [17, 2.5px], [20, 3m]]
                bridge:
                    filter: { is_bridge: true }
                    draw:
                        lines:
                            cap: round
                            outline:
                                color: [[13, global.light_color], [15, global.mid_color]]
                                cap: butt
            bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: round
                        outline:
                            color: global.mid_color
                            cap: butt
            labels-path:
                filter: { $zoom: { min: 18 } }
                draw:
                    text-blend-order:
                        priority: 61
                        visible: true
                        text_source: name
                        font:
                            size: 11px
                            stroke: { color: global.roads_text_stroke, width: 4px }
        track:
            filter: { kind: path, kind_detail: track }
            draw:
                lines:
                    color: global.white_color
                    width: [[13, 0px], [16, 0.15px], [17, 2.5px], [20, 4m]]
            bridge:
                filter: { is_bridge: true }
                draw:
                    lines:
                        cap: butt
                        color: global.white_color
                        outline:
                            color: [[13, global.light_color], [15, global.black_color]]
                            cap: butt

            labels-track:
                filter: { $zoom: { min: 18 } }
                draw:
                    text-blend-order:
                        priority: 61
                        visible: true
                        text_source: name
                        font:
                            size: 11px
                            stroke: { color: global.roads_text_stroke, width: 4px }

        steps:
            filter:
                all:
                    - kind: path
                    - kind_detail: steps
            draw:
                lines:
                    dash: [0.75, 0.75]
                    dash_background_color: global.white_color
                    order: global.feature_order
                    color: global.midlight_color
                    width: [[15, 0.5px], [18, 3px], [19, 1.5m]]
            labels-steps:
                filter: { $zoom: { min: 18 } }
                draw:
                    text-blend-order:
                        priority: 62
                        visible: true
                        text_source: name
                        font:
                            size: 11px
                            stroke: { color: global.roads_text_stroke, width: 4px }

    # landuse:
    #     data: { source: mapzen }
    #     filter:
    #         $zoom: { min: 7 }
    #     draw:
    #         polygons:
    #             order: global.feature_order
    #             visible: false
    #         lines:
    #             order: global.feature_order
    #             visible: false
    #     # tier1:
    #     national_park:
    #         filter:
    #             all:
    #                 - kind: [national_park, battlefield, protected_area]
    #             any:
    #                 - not: { operator: [ "United States Forest Service" ] }
    #                 - protect_class: ['2','3','5']
    #         draw:
    #             polygons:
    #                 style: terrain-pattern-park
    #                 color: [0.500,0.500,0.500]
    #                 visible: true
    #         us_national_park:
    #             # yosemite national park, death valley national park, grand canyon national park
    #             filter:
    #                 any:
    #                     - operator: [ "United States National Park Service" ]
    #                     - protect_class: ['2','3','5']
    #             draw:
    #                 polygons:
    #                     style: terrain-pattern-park
    #                     color: [0.500,0.500,0.500]
    #                     visible: true

    #     conservation:
    #         filter:
    #             kind: [protected_area, nature_reserve, national_park]
    #             not: { protect_class: ['2','3','5']}
    #         draw:
    #             polygons:
    #                 style: terrain-pattern-park
    #                 color: [0.750,0.750,0.750]
    #                 visible: true

    #     national_forest_level_6:
    #         filter:
    #             all:
    #                 - kind: forest
    #             any:
    #                 - protect_class: ['6']
    #                 - operator: ['United States Forest Service']
    #         draw:
    #             polygons:
    #                 style: terrain-pattern-park
    #                 color: [0.400,0.400,0.400]
    #                 visible: true

    #     forest-landcover:
    #         filter: { kind: [forest, natural_forest, wood, natural_wood, natural_park], $zoom: { min: 10 }, not: { operator: "United States Forest Service" } }
    #         draw:
    #             polygons:
    #                 style: terrain-pattern-forest
    #                 color: [0.500,0.500,0.500]
    #                 visible: true

    #     parks-and-national-forests-not-national-park:
    #         filter:
    #             all:
    #                 - $zoom: { min: 4 }
    #                 - kind: [park, national_park]
    #             any:
    #                 - not: { operator: [ "United States National Park Service", "United States Forest Service" ] }
    #                 - not: { protect_class: ['2','3','5','6'] }
    #         # default for national forests and more?
    #         draw:
    #             polygons:
    #                 style: terrain-pattern-park
    #                 color: [0.960,0.960,0.960]
    #                 visible: true
    #         national_park:
    #             #filter: function() { return feature.name && (feature.name.indexOf('National Park') > -1); }
    #             filter:
    #                 all:
    #                     - kind: national_park
    #                     - not: [ protect_class: ['2','3','5','6'], operator: [ "United States National Park Service"] ]
    #             draw:
    #                 polygons:
    #                     style: terrain-pattern-park
    #                     color: [0.950,0.950,0.950]
    #                     visible: true

    buildings:
        data: { source: mapzen, layer: buildings }
        filter:
            not: { location: underground }
        draw:
            polygons:
                visible: false
                order: 329
                color: [0.100,0.100,0.100,0.85]
                style: polygons_transparent

        footprints:
            filter:
                any:
                    - { $zoom: [13], scale_rank: [1,2] }
                    - { $zoom: [14], scale_rank: [1,2,3] }
                    - { $zoom: [15], height: { min: 100 } }
                    - { $zoom: [15], area: { min: 700 } }
                    - { $zoom: [15], volume: { min: 100000 } }
                    - { $zoom: [16], area: { min: 100 } }
                    - { $zoom: [16], volume: { min: 50000 } }
                    - { $zoom: { min: 17 }, area: true }
            draw:
                polygons:
                    visible: true


    boundaries:
        data: { source: mapzen, layer: boundaries }
        # country subdivisions (states, provinces)
        draw:
            lines:
                order: global.feature_order
        country:
            filter:
                any:
                    - kind: country
                    - admin_level: 2
            draw:
                country-outerline:
                    style: lines
                    order: function() { return (feature.sort_rank -1); }
                    color: global.extralight_color
                    width: [[0, 0px], [4, 2px], [8, 5px], [14, 7px], [17, 14m]]
                lines:
                    color: global.white_color
                    width: [[0, 0px], [5, 0px], [6, 1px], [14, 2px]]
            water:
                filter: { maritime_boundary: true }
                draw:
                    country-outerline:
                        visible: false
                    lines:
                        visible: false
            # country-labels:
            #     filter: { name: true, $zoom: { min: 8 }, not: { maritime_boundary: true } }
            #     draw:
            #         text-blend-order:
            #             priority: 2
            #             visible: global.text_visible_admin
            #             text_source: global.ux_language_text_source_boundary_lines_left_right
            #             offset: [[8, [0, 7px]], [11, [0, 8px]], [12, [0, 9px]]]
            #             text_wrap: 100
            #             font:
            #                 family: global.text_font_family
            #                 size: 10px
            #                 fill: global.black_color
            #                 transform: uppercase
            #     no-left-right:
            #         filter: { "name:left": false, "name:right": false }
            #         draw:
            #             text-blend-order:
            #                 text_source: global.ux_language_text_source_boundary_lines
            #                 offset: 0px

        other_country_boundary_disputed_etc:
            filter: { kind: [disputed, indefinite, indeterminate, lease_limit, line_of_control, overlay_limit] }
            draw:
                lines:
                    dash: [1.25, 1.25]
                    order: global.feature_order
                    color: global.extralight_color
                    width: [[1,0.2px],[9,1.5px],[17,10m]]
            disputed:
                filter: { kind: [disputed, line_of_control] }
                draw:
                    lines:
                        dash: [2.0, 1.0]
                        order: global.feature_order
                        color: global.extralight_color
                        width: [[1, 0.5px], [9, 2.5px], [17,14m]]

        region:
            filter:
                any:
                    - kind: [region,macroregion]
                    - kind_detail: [3,4]
            draw:
                lines:
                    color: global.extralight_color
                    # width: [[0, 0.5px], [9, 2px], [14, 4px], [16, 6.5px], [17, 16m]]
                    width: [[0, 0.5px], [14, 3px], [16, 5px], [17, 16m]]

            water:
                filter: { maritime_boundary: true }
                draw:
                    lines:
                        visible: false

            dash-borders:
                filter:
                    $zoom: { min: 7 }
                draw:
                    lines:
                        dash: [7.0, 2.0]

            early:
                filter: { not: { min_zoom: [1,2] }, $zoom: { max: 8 } }
                draw:
                    lines:
                        visible: false

            # region-labels:
            #     filter: { name: true, $zoom: { min: 9 }, not: { maritime_boundary: true } }
            #     draw:
            #         text-blend-order:
            #             priority: 3
            #             visible: global.text_visible_admin
            #             text_source: global.ux_language_text_source_boundary_lines_left_right
            #             offset: [[8,[0, 5px]], [11, [0, 6px]], [12,[0, 7px]]]
            #             text_wrap: 100
            #             # offset: [0px, 10px]
            #             # anchor: top
            #             font:
            #                 family: global.text_font_family
            #                 size: 9px
            #                 fill: global.mid_color
            #                 transform: uppercase
            #     no-left-right:
            #         filter: { "name:left": false, "name:right": false }
            #         draw:
            #             text-blend-order:
            #                 text_source: global.ux_language_text_source_boundary_lines
            #                 offset: 0px

    places:
        data: { source: mapzen, layer: places }
        filter:
            name: true
        draw:
            text-blend-order:
                visible: false    # labels are enabled by each layer below
                buffer: 3px
                font:
                    family: global.text_font_family
                    fill: [0.900,0.900,0.900]
            # END NOTE

        populated-places:
            filter:
                kind: locality
            draw:
                text-blend-order:
                    visible: true
                    buffer: 42px
                    font:
                        size: [[5,9px],[8,10px],[12,11px]]
                        stroke: { color: [0.100,0.100,0.100], width: 6px }

            # _text_early:
            #     filter: { $zoom: { max: 11 } }
            #     draw:
            #         text-blend-order:
            #             visible: false


            # HACK
            # NOTE: These should use icon: buffer instead of going visible: false, but there are problems using icon here :(
            # This fixes Paris area, but causes problems for small places in the USA eg Table Bluff near Eureka, California.
            funky-village:
                filter: { $zoom: [11], population: { max: 1000 }, kind_detail: [village] }
                draw:
                    text-blend-order:
                        visible: false
            funky-isolated_dwelling:
                filter: { $zoom: [13], kind_detail: [isolated_dwelling] }
                draw:
                    text-blend-order:
                        visible: false
            hamlet:
                filter: { $zoom: [13], kind_detail: hamlet }
                draw:
                    text-blend-order:
                        visible: false
            # END HACK

            # someone in London and Salt Lake City thought neighbourhoods should be tagged place: locality
            # They were wrong
            funky-fake-neighbourhoods:
                filter: { $zoom: { min: 13 }, kind_detail: [locality] }
                draw:
                    text-blend-order:
                        visible: false


            population-10m-up:
                filter:
                    population: { min: 10000000 }
                draw:
                    text-blend-order:
                        priority: 6
                        font:
                            size: [[2,11px],[6,15px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-5m-10m:
                filter:
                    population: { min: 5000000, max: 10000000 }
                draw:
                    text-blend-order:
                        priority: 7
                        font:
                            size: [[4,10px],[6,14px],[8,18px],[10,20px],[12,20px],[13,0px]]
            population-1m-5m:
                filter:
                    population: { min: 1000000, max: 5000000 }
                draw:
                    text-blend-order:
                        priority: 9
                        font:
                            size: [[4,10px],[6,14px],[8,15px],[12,18px],[13,0px]]
            population-500k-1m:
                filter:
                    population: { min: 500000, max: 1000000 }
                draw:
                    text-blend-order:
                        priority: 11
                        font:
                            size: [[5,10px],[8,12px],[10,14px],[12,16px],[13,0px]]
            population-200k-500k:
                filter:
                    population: { min: 200000, max: 500000 }
                draw:
                    text-blend-order:
                        priority: 13
                        font:
                            size: [[6,10px],[8,14px],[10,15px],[12,16px],[13,0px]]
            population-100k-200k:
                filter:
                    population: { min: 100000, max: 200000 }
                draw:
                    text-blend-order:
                        priority: 15
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-50k-100k:
                filter:
                    population: { min: 50000, max: 100000 }
                draw:
                    text-blend-order:
                        priority: 17
                        font:
                            size: [[6,10px],[8,12px],[14,14px],[15,0px]]
            population-20k-50k:
                filter:
                    population: { min: 20000, max: 50000 }
                draw:
                    text-blend-order:
                        priority: 19
                        font:
                            size: [[9,10px],[14,12px],[15,0px]]
            population-10k-20k:
                filter:
                    population: { min: 10000, max: 20000 }
                draw:
                    text-blend-order:
                        priority: 21
                        font:
                            size: [[9, 10px],[14, 12px],[15, 0px]]
            population-5k-10k:
                filter:
                    population: { min: 5000, max: 10000 }
                draw:
                    text-blend-order:
                        priority: 23
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-2k-5k:
                filter:
                    population: { min: 2000, max: 5000 }
                draw:
                    text-blend-order:
                        priority: 25
                        font:
                            size: [[9,10px], [14,12px], [15,0px]]
            population-1k-2k:
                filter:
                    population: { min: 1000, max: 2000 }
                draw:
                    text-blend-order:
                        priority: 27
                        font:
                            size: [[9, 10px], [14, 12px], [15, 0px]]
            population-200-1k:
                filter:
                    population: { min: 200, max: 1000 }
                draw:
                    text-blend-order:
                        priority: 28
                        font:
                            size: [[9, 10px], [14, 11px], [15, 0px]]

        neighbourhoods:
            filter:
                all:
                    - kind:
                        - borough
                        - macrohood
                        - neighbourhood
                        #- microhood       # until Tenderloin microhoods are cleaned up, ban this placetype
                    - $zoom: { min: 10, max: 17 }
                    - is_landuse_aoi: false
                    - function() { return (feature.min_zoom <= ($zoom+0.5) && feature.max_zoom >= ($zoom+1)) }
            draw:
                text-blend-order:
                    visible: true
                    priority: 29
                    buffer: 8px
                    text_wrap: 10
                    max_lines: 2
                    font:
                        fill: [0.500,0.500,0.500]
                        size: [[11, 9px], [12, 10px], [13, 12px], [14, 16px], [16, 24px]]
                        weight: normal
                        transform: uppercase
                        stroke: { color: [0.110,0.110,0.110], width: [[12, 4px], [13, 6px], [15, 8px]] }

            z13-up:
                filter:
                    $zoom: { min: 13 }
                draw:
                    text-blend-order:
                        font:
                            weight: 300

                low_quality_kind_tile_rank:
                    filter:
                        kind_tile_rank: { min: 8 }
                    draw:
                        text-blend-order:
                            visible: false

                z14-up:
                    filter:
                        $zoom: { min: 14 }
                    draw:
                        text-blend-order:
                            text_wrap: 9
                            visible: true

                    z15-up:
                        filter:
                            $zoom: { min: 15 }
                            min_zoom: { min: 15 }
                        draw:
                            text-blend-order:
                                priority: 19
                                font:
                                    size: 13px

styles:
    polygons_transparent:
        base: polygons
        blend: overlay

    text-blend-order:
        base: text
        blend_order: 10

    terrain-pattern-earth:
        base: polygons
        mix: [elevation-ramp, terrain-pattern]
        shaders:
            uniforms:
                u_tint: [0.550,0.550,0.550]
                u_fill: [0.100,0.100,0.100]
            blocks:
                filter: |
                    color.rgb = mix(u_tint.rgb, u_fill.rgb, color.rgb);

    terrain-pattern-water:
        base: polygons
        mix: [elevation-ramp, terrain-pattern]
        shaders:
            uniforms:
                u_tint: [0.190,0.190,0.190]
                u_fill: [0.100,0.100,0.100]
            blocks:
                filter: |
                    color.rgb = mix(u_tint.rgb, u_fill.rgb, color.rgb);

    # terrain-pattern-park:
    #     base: polygons
    #     mix: [elevation-ramp, terrain-pattern2]
    #     shaders:
    #         uniforms:
    #             u_tint: [0.500,0.500,0.500]
    #             u_fill: [0.100,0.100,0.100]
    #         blocks:
    #             filter: |
    #                 color.rgb = mix(u_tint.rgb, u_fill.rgb, color.rgb);

    # terrain-pattern-forest:
    #     base: polygons
    #     mix: [elevation-ramp, terrain-pattern3]
    #     shaders:
    #         uniforms:
    #             u_tint: [0.600,0.600,0.600]
    #             u_fill: [0.100,0.100,0.100]
    #         blocks:
    #             filter: |
    #                 color.rgb = mix(u_tint.rgb, u_fill.rgb, color.rgb);

    terrain-pattern:
        base: polygons
        mix: [elevation-normal, functions-zoom, polygons-dots]
        shaders:
            defines:
                ZOOM_START: 0.
                ZOOM_END: 13.
                DOTS_DIR: vec3(0.600,-0.950,0.520)
                DOTS_COLOR: vec3(0.)
                DOTS_BACKGROUND_COLOR: vec3(1.)
                DOTS_SCALE: 35.
                DOTS_SIZE: mix(shade*10.,shade*2.,zoom())
            blocks:
                normal: |
                    float shade = dot(normal, DOTS_DIR);
                    // modify brightness and contrast
                    shade = shade*shade*shade * -2. + .58;
                    // reset normal to prevent standard terrain shading mixing with dots
                    normal = vec3(0,0,1);

    terrain-pattern2:
        base: polygons
        mix: [elevation-normal2, functions-zoom, polygons-dots]
        shaders:
            defines:
                ZOOM_START: 0.
                ZOOM_END: 13.
                DOTS_DIR: vec3(0.600,-0.950,0.520)
                DOTS_COLOR: vec3(0.)
                DOTS_BACKGROUND_COLOR: vec3(1.)
                DOTS_SCALE: 37.
                DOTS_SIZE: mix(shade*10.,shade*2.,zoom())
            blocks:
                normal: |
                    float shade = dot(normal, DOTS_DIR);
                    // modify brightness and contrast
                    shade = shade*shade*shade * -2. + .58;
                    // reset normal to prevent standard terrain shading mixing with dots
                    normal = vec3(0,0,1);

    terrain-pattern3:
        base: polygons
        mix: [elevation-normal2, functions-zoom, polygons-dots]
        shaders:
            defines:
                ZOOM_START: 0.
                ZOOM_END: 13.
                DOTS_DIR: vec3(0.600,-0.950,0.520)
                DOTS_COLOR: vec3(0.)
                DOTS_BACKGROUND_COLOR: vec3(1.)
                DOTS_SCALE: 15.
                DOTS_SIZE: mix(shade*10.,shade*2.,zoom())
            blocks:
                normal: |
                    float shade = dot(normal, DOTS_DIR);
                    // modify brightness and contrast
                    shade = shade*shade*shade * -2. + .31;
                    // reset normal to prevent standard terrain shading mixing with dots
                    normal = vec3(0,0,1);


    elevation-normal:
        raster: custom
        shaders:
            defines:
                NORMAL_TEXTURE_INDEX: 0
            blocks:
                normal: |
                    vec4 normal_elv_raster = sampleRaster(int(NORMAL_TEXTURE_INDEX));
                    normal = (normal_elv_raster.rgb-.1)*2.;

    elevation-normal2:
        raster: custom
        shaders:
            defines:
                NORMAL_TEXTURE_INDEX: 0
            blocks:
                normal: |
                    vec4 normal_elv_raster = sampleRaster(int(NORMAL_TEXTURE_INDEX));
                    normal = (normal_elv_raster.rgb-.15)*2.;

    elevation-ramp:
        shaders:
            uniforms:
                u_ramp: palette
            blocks:
                color: |
                    color = texture2D(u_ramp, vec2((1.-normal_elv_raster.a),.5));
        raster: custom

    functions-zoom:
        shaders:
            defines:
                ZOOM_START: 14
                ZOOM_END: 20
                ZOOM_MAX: 'max(ZOOM_START, ZOOM_END)'
                ZOOM_FNC: linear
                ZOOM_IN: 0.
                ZOOM_OUT: 1.
            blocks:
                global: |
                    float zoom() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    clamp( smoothstep(  ZOOM_START/ZOOM_MAX,
                                                        ZOOM_END/ZOOM_MAX,
                                                        max(u_map_position.z/ZOOM_MAX, 0.)), 0., 1.) );
                    }

                    float zoomEase() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    (u_map_position.z-ZOOM_START)/(ZOOM_END-ZOOM_START) );
                    }

    polygons-dots:
        base: polygons
        mix:
            - space-tile
            - tiling-brick
            - shapes-circle
        shaders:
            blocks:
                global: |
                    float TileDots(float scale, float size) {

                        // controls
                        float DOT_SIZE = size * .1; // bigger value = smaller dots
                        float SPEED = 2.; // bigger value = faster transition

                        vec2 tc = getTileCoords() * size * pow(2., floor(u_map_position.z) - abs(u_tile_origin.z));
                        vec2 IN = brick(tc, 2.);
                        float A = circleDF(vec2(.5) - IN) * DOT_SIZE;
                        vec2 OUT = brick(tc, 4.);
                        float B = circleDF(vec2(.5) - OUT) * DOT_SIZE;

                        // keep B dots big as they fade in, to maintain density
                        B *= pow(fract(u_map_position.z)*.95, SPEED);

                        float d = mix(A, B, pow(fract(u_map_position.z), SPEED));
                        return aastep(scale, d);
                    }

                color: |
                    color.rgb = mix(DOTS_COLOR, DOTS_BACKGROUND_COLOR, TileDots(DOTS_SIZE, DOTS_SCALE));

    shapes-circle:
        mix: functions-aastep
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // get distance field of a Circle
                    // ================================
                    float circleDF (vec2 st) {
                        return dot(st,st);
                    }
                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circle (vec2 st, float radius) {
                        return 1.-aastep(radius, circleDF(st-vec2(0.5))*PI);
                    }

    tiling-brick:
        shaders:
            blocks:
                global: |
                    // Repeats a coordinate space (st) in diferent brick-like tiles
                    // ================================
                    vec2 brick(vec2 st, float zoom){
                        st *= zoom;
                        // Here is where the offset is happening
                        st.x += step(1., mod(st.y, 2.0)) * 0.5;
                        return fract(st);
                    }

    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;

    functions-aastep:
        doc:
            author:
                name: Matt DesLauriers
                twitter: mattdesl
            description: 'AnitAliased ```step()``` function implemented by [Matt DesLauriers](https://twitter.com/mattdesl)
                in this module <https://github.com/stackgl/glsl-aastep>

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// AntiAliased Step function\n//=============================\n\
                    float aastep(float threshold, float value) {\n    #ifdef TANGRAM_FRAGMENT_SHADER\n\
                    \        #ifdef TANGRAM_EXTENSION_OES_standard_derivatives\n \
                    \           float afwidth = length(vec2(dFdx(value), dFdy(value)))\
                    \ * 0.70710678118654757;\n            return smoothstep(threshold-afwidth,\
                    \ threshold+afwidth, value);\n        #else\n            return\
                    \ step(threshold, value);\n        #endif  \n    #else\n     \
                    \   return step(threshold, value);\n    #endif\n}"
            extensions: OES_standard_derivatives
