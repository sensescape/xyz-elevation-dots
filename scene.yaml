# Author: Geraldine Sarmiento

# Tangram Blocks
# https://tangrams.github.io/blocks/
# Patricio Gonzalez Vivo

cameras:
    camera1:
        type: perspective

global:
    # default order for basemap features
    feature_order: function() { return feature.sort_rank; }
    feature_order_down_1: function() { return feature.sort_rank - 1; }
    building_extrude_height: |
        function () { return feature.height > 16 || $zoom >= 16; }

    # Sign up for a Mapzen API key to enjoy higher rate limits
    # https://mapzen.com/documentation/overview/#developer-accounts-and-api-keys
    sdk_api_key: '3eqm2_bfTNGZ85ar20fVyA'     # set this value to your Mapzen API key

textures:
    palette:
        url: images/ramp.png

scene:
    background:
        color: [0.200,0.200,0.200]

sources:
    # mapzen:
    #     type: MVT
    #     # url:  https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
    #     url: https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt
    #     url_params:
    #         api_key: JJiaZE63TZObzPrmx0TQkw
    #     tile_size: 512
    #     max_zoom: 16

    mapzen:
        type: MVT
        url: https://tile.nextzen.org/tilezen/vector/v1/512/all/{z}/{x}/{y}.mvt
        url_params:
            api_key: global.sdk_api_key
        rasters: [normals-elevation]
        tile_size: 512
        max_zoom: 15
    normals-elevation:
        type: Raster
        url: https://tile.nextzen.org/tilezen/terrain/v1/512/normal/{z}/{x}/{y}.png
        url_params:
            api_key: global.sdk_api_key
        tile_size: 512
        max_zoom: 14

    xyz-osm:
        type: MVT
        url: https://xyz.api.here.com/tiles/osmbase/256/all/{z}/{x}/{y}.mvt

layers:
    earth:
        data: { source: mapzen, layer: earth }
        draw:
            polygons:
                style: terrain-pattern-earth
                order: global.feature_order
                color: [0.690,0.690,0.690] #color of stripes

    # landuse:
    #     data: { source: mapzen }
    #     draw:
    #         polygons:
    #             style: dash-terrain-landuse
    #             order: global.feature_order
    #             color: [0.000,0.000,0.000]

    water:
        data: { source: mapzen, layer: water }
        draw:
            polygons:
                order: global.feature_order
                color: [0.200,0.200,0.200]

        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: [1],  area: { min: 10000000000 } }
                    - { $zoom: [2],  area: { min: 7000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: [3],  area: { min: 5000000000 } }
                    - { $zoom: [4],  area: { min: 300000000 } }
                    - { $zoom: [5],  area: { min: 50000000 } }
                    - { $zoom: [6],  area: { min: 50000000 } }
                    - { $zoom: [7],  area: { min: 50000000 } }
                    - { $zoom: [8],  area: { min: 50000000 } }
                    - { $zoom: [9],  area: { min: 15000000 } }
                    - { $zoom: [10], area: { min: 4000000 } }
                    - { $zoom: [11], area: { min: 1000000 } }
                    - { $zoom: [12], area: { min: 250000 } }
                    - { $zoom: [13], area: { min: 150000 } }
                    - { $zoom: [14], area: { min: 40000 } }
                    - { $zoom: { min: 15 } }
            draw:
                polygons:
                    color: [0.200,0.200,0.200]

        other-water-areas:
            filter: { not: { kind: [ocean, lake, water, reservoir] }, $zoom: { min: 11 }, area: { min: 100 } }
            draw:
                polygons:
                    color: [0.200,0.200,0.200]

    # roads:
    #     data: { source: xyz-osm }
    #     filter: { not: { kind: [rail, ferry] } }
    #     draw:
    #         lines:
    #             order: global.feature_order
    #             color: [0.633,0.641,0.645]
    #             width: [[7,0.0px], [10, .5px], [15, .75px], [17, 5m]]
    #     highway:
    #         filter: { kind: highway }
    #         draw:
    #             lines:
    #                 order: 5
    #                 width: [[8,0px], [8,.25px], [11, 1.5px], [14, 2px], [16, 4px], [17, 10m]]
    #         link:
    #             filter: { is_link: true } # on- and off-ramps, etc
    #             draw:
    #                 lines:
    #                     width: [[8,0px], [14, 3px], [16, 5px], [18, 10m]]
    #             tunnel-link:
    #                 filter: {is_tunnel: true, $zoom: {min: 13} }
    #     tunnel:
    #         filter: {is_tunnel: true }
    #         draw:
    #             lines:
    #                 order: 6


    # buildings:
    #     data: { source: mapzen, layer: buildings }
    #     filter:
    #         not: { location: underground }
    #     draw:
    #         polygons:
    #             style: dash-pattern-bldgs
    #             visible: false
    #             order: 329
    #             color: [0.263,0.263,0.263]
    #             # style: polygons_transparent
    #
    #     footprints:
    #         filter:
    #             any:
    #                 - { $zoom: [13], scale_rank: [1,2] }
    #                 - { $zoom: [14], scale_rank: [1,2,3] }
    #                 - { $zoom: [15], height: { min: 100 } }
    #                 - { $zoom: [15], area: { min: 700 } }
    #                 - { $zoom: [15], volume: { min: 100000 } }
    #                 - { $zoom: [16], area: { min: 100 } }
    #                 - { $zoom: [16], volume: { min: 50000 } }
    #                 - { $zoom: { min: 17 }, area: true }
    #         draw:
    #             polygons:
    #                 visible: true

            # extrude:
            #     filter:
            #         all:
            #             - any:
            #                 - { $zoom: [15], height: { min: 250 } }
            #                 - { $zoom: [15], area: { min: 9000 } }
            #                 - { $zoom: [15], volume: { min: 150000 } }
            #                 - { $zoom: [16], height: { min: 100 } }
            #                 - { $zoom: [16], area: { min: 3500 } }
            #                 - { $zoom: [16], volume: { min: 50000 } }
            #                 - { $zoom: [17], area: { min: 500 } }
            #                 - { $zoom: [17], volume: { min: 15000 } }
            #                 - { $zoom: { min: 18 } }
            #             - not:
            #                 - layer: [-1, -2, -3, -4, -5]
            #     draw:
            #         polygons:
            #             visible: extrude
            #             order: 438
            #             color: |
            #                 function () {
            #                     var h = feature.height || 20;
            #                     h = Math.min((h + 75)/ 255, .5); // max brightness: .5
            #                     h = Math.max(h, .1); // min brightness: .1
            #                     return [h, h, h];
            #                 }
            #             extrude: global.building_extrude_height

styles:
    terrain-pattern-earth:
        base: polygons
        mix: [elevation-ramp, terrain-pattern, colorized-earth]

    colorized-earth:
        shaders:
            uniforms:
                u_tint: [0.100,0.100,0.100]
                u_fill: [0.900,0.900,0.900]
            blocks:
                filter: |
                    color.rgb = mix(u_tint.rgb, u_fill.rgb, color.rgb);

    terrain-pattern:
        base: polygons
        mix: [elevation-normal, functions-zoom, polygons-dots]
        shaders:
            defines:
                ZOOM_START: 0.
                ZOOM_END: 13.
                DOTS_DIR: vec3(0.600,-0.950,0.520)
                DOTS_COLOR: vec3(0.)
                DOTS_BACKGROUND_COLOR: vec3(1.)
                DOTS_SCALE: 35.
                DOTS_SIZE: mix(shade*10.,shade*2.,zoom())
            blocks:
                normal: |
                    float shade = dot(normal, DOTS_DIR);
                    // modify brightness and contrast
                    shade = shade*shade*shade * -2. + .65;
                    // reset normal to prevent standard terrain shading mixing with dots
                    normal = vec3(0,0,1);

    elevation-normal:
        raster: custom
        shaders:
            defines:
                NORMAL_TEXTURE_INDEX: 0
            blocks:
                normal: |
                    vec4 normal_elv_raster = sampleRaster(int(NORMAL_TEXTURE_INDEX));
                    normal = (normal_elv_raster.rgb-.5)*2.;

    elevation-ramp:
        shaders:
            uniforms:
                u_ramp: palette
            blocks:
                color: |
                    color = texture2D(u_ramp, vec2((1.-normal_elv_raster.a),.5));
        raster: custom

    functions-zoom:
        shaders:
            defines:
                ZOOM_START: 14
                ZOOM_END: 20
                ZOOM_MAX: 'max(ZOOM_START, ZOOM_END)'
                ZOOM_FNC: linear
                ZOOM_IN: 0.
                ZOOM_OUT: 1.
            blocks:
                global: |
                    float zoom() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    clamp( smoothstep(  ZOOM_START/ZOOM_MAX,
                                                        ZOOM_END/ZOOM_MAX,
                                                        max(u_map_position.z/ZOOM_MAX, 0.)), 0., 1.) );
                    }

                    float zoomEase() {
                        return mix( ZOOM_IN,
                                    ZOOM_OUT,
                                    (u_map_position.z-ZOOM_START)/(ZOOM_END-ZOOM_START) );
                    }

    polygons-dots:
        base: polygons
        mix:
            - space-tile
            - tiling-brick
            - shapes-circle
        shaders:
            blocks:
                global: |
                    float TileDots(float scale, float size) {

                        // controls
                        float DOT_SIZE = size * .1; // bigger value = smaller dots
                        float SPEED = 2.; // bigger value = faster transition

                        vec2 tc = getTileCoords() * size * pow(2., floor(u_map_position.z) - abs(u_tile_origin.z));
                        vec2 IN = brick(tc, 2.);
                        float A = circleDF(vec2(.5) - IN) * DOT_SIZE;
                        vec2 OUT = brick(tc, 4.);
                        float B = circleDF(vec2(.5) - OUT) * DOT_SIZE;

                        // keep B dots big as they fade in, to maintain density
                        B *= pow(fract(u_map_position.z)*.95, SPEED);

                        float d = mix(A, B, pow(fract(u_map_position.z), SPEED));
                        return aastep(scale, d);
                    }

                color: |
                    color.rgb = mix(DOTS_COLOR, DOTS_BACKGROUND_COLOR, TileDots(DOTS_SIZE, DOTS_SCALE));

    shapes-circle:
        mix: functions-aastep
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // get distance field of a Circle
                    // ================================
                    float circleDF (vec2 st) {
                        return dot(st,st);
                    }
                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circle (vec2 st, float radius) {
                        return 1.-aastep(radius, circleDF(st-vec2(0.5))*PI);
                    }

    tiling-brick:
        shaders:
            blocks:
                global: |
                    // Repeats a coordinate space (st) in diferent brick-like tiles
                    // ================================
                    vec2 brick(vec2 st, float zoom){
                        st *= zoom;
                        // Here is where the offset is happening
                        st.x += step(1., mod(st.y, 2.0)) * 0.5;
                        return fract(st);
                    }

    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;

    block:
        shaders:
            defines:
                ADD: +
                EPSILON: 1.0e-07
                HALF_PI: 1.5707963267948966
                MULTIPLY: '*'
                PI: 3.141592653589793
                QUATER_PI: 0.785398163
                SUBTRACT: '-'
                TWO_PI: 6.283185307179586
                deg2rad(d): (((d)*3.1415926535897932384626433832795)/180.0)
                rad2deg(d): (((d)*180.0)/3.1415926535897932384626433832795)
    elevation-stripes:
        base: polygons
        blend: inlay
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Perfect for the `landuse` layer on your elevation maps,
                the `elevation-stripe` modules use the color of the layer to draw
                a stripe pattern that changes width based on the surface of the terrain.

                '
            examples:
                stripes:
                    img: https://tangrams.github.io/tangram-sandbox/styles/elevation-stripes.png
                    url: https://tangrams.github.io/tangram-sandbox/styles/elevation-stripes.yaml
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        lighting: false
        mix:
        - polygons-diagonal-stripes
        raster: custom
        shaders:
            defines:
                NORMAL_TEXTURE_INDEX: 0
                STRIPES_ALPHA: 0.2
                STRIPES_DIR: vec3(-0.600,-0.420,0.600)
                STRIPES_PCT: 1.6
                STRIPES_SCALE: 30.0
                STRIPES_WIDTH: dot((sampleRaster(int(NORMAL_TEXTURE_INDEX)).rgb-.5)*2.,
                    STRIPES_DIR)*STRIPES_PCT
    functions-aastep:
        doc:
            author:
                name: Matt DesLauriers
                twitter: mattdesl
            description: 'AnitAliased ```step()``` function implemented by [Matt DesLauriers](https://twitter.com/mattdesl)
                in this module <https://github.com/stackgl/glsl-aastep>

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// AntiAliased Step function\n//=============================\n\
                    float aastep(float threshold, float value) {\n    #ifdef TANGRAM_FRAGMENT_SHADER\n\
                    \        #ifdef TANGRAM_EXTENSION_OES_standard_derivatives\n \
                    \           float afwidth = length(vec2(dFdx(value), dFdy(value)))\
                    \ * 0.70710678118654757;\n            return smoothstep(threshold-afwidth,\
                    \ threshold+afwidth, value);\n        #else\n            return\
                    \ step(threshold, value);\n        #endif  \n    #else\n     \
                    \   return step(threshold, value);\n    #endif\n}"
            extensions: OES_standard_derivatives
    geometry-matrices:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Useful set of functions to construct scale, rotation and
                translation of 2, 3 or 4 dimensions. For more information about matrices
                read [this chapter from The Book of Shaders](http://thebookofshaders.com/08/)

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - block
        shaders:
            blocks:
                global: "// Rotate in 2, 3 and 4 dimensions\n// ================================\n\
                    mat2 rotate2D (float angle) {\n    return mat2(cos(angle),-sin(angle),\n\
                    \                sin(angle),cos(angle));\n}\n#ifdef TANGRAM_FRAGMENT_SHADER\n\
                    vec2 rotate2D (vec2 st, float a) {\n    return (rotate2D(a)*(st-.5))+.5;\n\
                    }\n#endif\nmat3 rotateX3D (float phi) {\n    return mat3(\n  \
                    \      vec3(1.,0.,0.),\n        vec3(0.,cos(phi),-sin(phi)),\n\
                    \        vec3(0.,sin(phi),cos(phi)));\n}\nmat4 rotateX4D (float\
                    \ phi) {\n    return mat4(\n        vec4(1.,0.,0.,0),\n      \
                    \  vec4(0.,cos(phi),-sin(phi),0.),\n        vec4(0.,sin(phi),cos(phi),0.),\n\
                    \        vec4(0.,0.,0.,1.));\n}\nmat3 rotateY3D (float theta)\
                    \ {\n    return mat3(\n        vec3(cos(theta),0.,-sin(theta)),\n\
                    \        vec3(0.,1.,0.),\n        vec3(sin(theta),0.,cos(theta)));\n\
                    }\nmat4 rotateY4D (float theta) {\n    return mat4(\n        vec4(cos(theta),0.,-sin(theta),0),\n\
                    \        vec4(0.,1.,0.,0.),\n        vec4(sin(theta),0.,cos(theta),0.),\n\
                    \        vec4(0.,0.,0.,1.));\n}\nmat3 rotateZ3D (float psi) {\n\
                    \    return mat3(\n        vec3(cos(psi),-sin(psi),0.),\n    \
                    \    vec3(sin(psi),cos(psi),0.),\n        vec3(0.,0.,1.));\n}\n\
                    mat4 rotateZ4D (float psi) {\n    return mat4(\n        vec4(cos(psi),-sin(psi),0.,0),\n\
                    \        vec4(sin(psi),cos(psi),0.,0.),\n        vec4(0.,0.,1.,0.),\n\
                    \        vec4(0.,0.,0.,1.));\n}\n//\n// Scale 4 dimensions\n//\
                    \ ================================\nmat4 scale4D (float x, float\
                    \ y, float z) {\n    return mat4(\n        vec4(x,   0.0, 0.0,\
                    \ 0.0),\n        vec4(0.0, y,   0.0, 0.0),\n        vec4(0.0,\
                    \ 0.0, z,   0.0),\n        vec4(0.0, 0.0, 0.0, 1.0)\n    );\n\
                    }\n//\n// Translate in 4 dimensions\nmat4 translate4D (float x,\
                    \ float y, float z) {\n    return mat4(\n        vec4(1.0, 0.0,\
                    \ 0.0, 0.0),\n        vec4(0.0, 1.0, 0.0, 0.0),\n        vec4(0.0,\
                    \ 0.0, 1.0, 0.0),\n        vec4(x,   y,   z,   1.0)\n    );\n\
                    }\n"
    patterns-stripes:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: "Collection of functions to draw stripes. To learn more about\
                \ patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)\
                \    \n"
            examples:
                grain-area:
                    img: https://tangrams.github.io/tangram-sandbox/styles/grain-area.png
                    lines: 26
                    url: https://tangrams.github.io/tangram-sandbox/styles/grain-area.yaml
                press:
                    img: https://tangrams.github.io/tangram-sandbox/styles/press.png
                    lines: 150
                    url: https://tangrams.github.io/tangram-sandbox/styles/press.yaml
                radar:
                    img: https://tangrams.github.io/tangram-sandbox/styles/radar.png
                    url: https://tangrams.github.io/tangram-sandbox/styles/radar.yaml
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - functions-aastep
        - geometry-matrices
        shaders:
            blocks:
                global: "// Return a distance function of stripes\nfloat stripesDF\
                    \ (vec2 st) {\n    return abs(sin(st.y*PI));\n}\n\n// Adjustable\
                    \ width stripes\nfloat stripes (vec2 st, float width) {\n    return\
                    \ aastep(width, stripesDF(st));\n}\n\n// Adjustable Angle\nfloat\
                    \ stripes (vec2 st, float width, float angle) {\n    st = rotate2D(angle)\
                    \ * st;\n    return stripes(st, width);\n}\n\n// Faster optimisation\
                    \ of diagonal stripes\nfloat diagonalStripes (vec2 st) {\n   \
                    \ vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n    if (mod(i_st.y,2.)\
                    \ - mod(i_st.x,2.) == 0.) {\n        return 1.0 - aastep(f_st.x,f_st.y);\n\
                    \    } else {\n        return aastep(f_st.x,f_st.y);\n    }\n\
                    }\n\n// Faster optimisation of diagonal stripes with controlable\
                    \ width\nfloat diagonalStripes (vec2 st, float width) {\n    st.y\
                    \ -= st.x;\n    return stripes(st, width);\n}"
            defines:
                PI: 3.141592653589793
    polygons-diagonal-stripes:
        base: polygons
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Apply a diagonal stripe pattern to the polygon style. To
                learn more about patterns check [this chapter from the Book of Shaders](https://thebookofshaders.com/09/)

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        mix:
        - patterns-stripes
        - space-tile
        shaders:
            blocks:
                color: "color.a = diagonalStripes( (getTileCoords()*0.9999)*floor(STRIPES_SCALE),\
                    \ \n                            STRIPES_WIDTH) * STRIPES_ALPHA;"
            defines:
                STRIPES_ALPHA: 1.0
                STRIPES_SCALE: 2.0
                STRIPES_WIDTH: 0.5
        ui:
            shaders:
                defines:
                    STRIPES_ALPHA:
                        label: Alpha
                        range:
                            max: 1.0
                            min: 0.0
                            step: 0.01
                        type: number
                    STRIPES_SCALE:
                        label: Scale
                        range:
                            max: 1000.0
                            min: 1.0
                            step: 1.0
                        type: number
                    STRIPES_WIDTH:
                        label: Alpha
                        range:
                            max: 1.0
                            min: 0.0
                            step: 0.01
                        type: number
    space-tile:
        doc:
            author:
                name: Patricio Gonzalez Vivo
                twitter: patriciogv
            description: 'Get the position on the tile

                '
            licence: MIT
            tangram-version: 0.0.7
            version: 0.0.1
        shaders:
            blocks:
                global: "// Variant to be add to both vertex and fragments shaders\n\
                    #ifndef v_pos\nvarying vec3 v_pos;\n#endif\n\n//\n// Get the coordinates\
                    \ in tile space\n// ================================\nvec2 getTileCoords()\
                    \ {\n    return fract(v_pos.xy);\n}\n"
                position: '// Normalize the attribute position of a vertex

                    v_pos = modelPosition().xyz;'
        test:
            tile:
                blocks:
                    color: 'vec2 st = getTileCoords();

                        color.rg += fract(st*3.);

                        '
                defines:
                    v_pos: v_texcoord
